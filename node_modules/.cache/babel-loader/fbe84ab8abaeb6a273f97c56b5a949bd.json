{"ast":null,"code":"export const purchaseTx = `\nimport MyNFT from 0x40582f87fa3d66cb\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport NFTMarketplace from 0x40582f87fa3d66cb\nimport FlowToken from 0x7e60df042a9c0868\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n    let saleCollection = getAccount(account).getCapability(/public/MySaleCollection)\n                        .borrow<&NFTMarketplace.SaleCollection{NFTMarketplace.SaleCollectionPublic}>()\n                        ?? panic(\"Could not borrow the user's SaleCollection\")\n\n    let recipientCollection = getAccount(acct.address).getCapability(/public/MyNFTCollection) \n                    .borrow<&MyNFT.Collection{NonFungibleToken.CollectionPublic}>()\n                    ?? panic(\"Can't get the User's collection.\")\n\n    let price = saleCollection.getPrice(id: id)\n\n    let payment <- acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)!.withdraw(amount: price) as! @FlowToken.Vault\n\n    saleCollection.purchase(id: id, recipientCollection: recipientCollection, payment: <- payment)\n  }\n\n  execute {\n    log(\"A user purchased an NFT\")\n  }\n}\n\n`;","map":{"version":3,"sources":["/home/prakash/nftdapp-tutorial/src/cadence/transactions/purchase.js"],"names":["purchaseTx"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BO","sourcesContent":["export const purchaseTx = `\nimport MyNFT from 0x40582f87fa3d66cb\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport NFTMarketplace from 0x40582f87fa3d66cb\nimport FlowToken from 0x7e60df042a9c0868\n\ntransaction(account: Address, id: UInt64) {\n\n  prepare(acct: AuthAccount) {\n    let saleCollection = getAccount(account).getCapability(/public/MySaleCollection)\n                        .borrow<&NFTMarketplace.SaleCollection{NFTMarketplace.SaleCollectionPublic}>()\n                        ?? panic(\"Could not borrow the user's SaleCollection\")\n\n    let recipientCollection = getAccount(acct.address).getCapability(/public/MyNFTCollection) \n                    .borrow<&MyNFT.Collection{NonFungibleToken.CollectionPublic}>()\n                    ?? panic(\"Can't get the User's collection.\")\n\n    let price = saleCollection.getPrice(id: id)\n\n    let payment <- acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)!.withdraw(amount: price) as! @FlowToken.Vault\n\n    saleCollection.purchase(id: id, recipientCollection: recipientCollection, payment: <- payment)\n  }\n\n  execute {\n    log(\"A user purchased an NFT\")\n  }\n}\n\n`"]},"metadata":{},"sourceType":"module"}