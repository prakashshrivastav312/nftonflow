{"ast":null,"code":"var _jsxFileName = \"/home/prakash/nftdapp-tutorial/src/SaleCollection.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { useState, useEffect } from 'react';\nimport { getSaleNFTsScript } from \"./cadence/scripts/get_sale_nfts\";\nimport { purchaseTx } from \"./cadence/transactions/purchase.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SaleCollection(props) {\n  _s();\n\n  const [nfts, setNFTs] = useState([]);\n  useEffect(() => {\n    getUserSaleNFTs();\n  }, []);\n\n  const getUserSaleNFTs = async () => {\n    const result = await fcl.send([fcl.script(getSaleNFTsScript), fcl.args([fcl.arg(props.address, t.Address)])]).then(fcl.decode);\n    console.log(result);\n    setNFTs(result);\n  };\n\n  const purchase = async id => {\n    const transactionId = await fcl.send([fcl.transaction(purchaseTx), fcl.args([fcl.arg(props.address, t.Address), fcl.arg(parseInt(id), t.UInt64)]), fcl.payer(fcl.authz), fcl.proposer(fcl.authz), fcl.authorizations([fcl.authz]), fcl.limit(9999)]).then(fcl.decode);\n    console.log(transactionId);\n    return fcl.tx(transactionId).onceSealed();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: 'lightblue'\n    },\n    children: Object.keys(nfts).map(nftID => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Price: \", nfts[nftID].price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: nftID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          width: \"100px\"\n        },\n        src: `https://ipfs.infura.io/ipfs/${nfts[nftID].nftRef.ipfsHash}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: nfts[nftID].nftRef.metadata.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => purchase(nftID),\n        children: \"Purchase this NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }, this)]\n    }, nftID, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SaleCollection, \"7phIsx6Y0qCXkIWOSGOTifNBFYQ=\");\n\n_c = SaleCollection;\nexport default SaleCollection;\n\nvar _c;\n\n$RefreshReg$(_c, \"SaleCollection\");","map":{"version":3,"sources":["/home/prakash/nftdapp-tutorial/src/SaleCollection.js"],"names":["fcl","t","useState","useEffect","getSaleNFTsScript","purchaseTx","SaleCollection","props","nfts","setNFTs","getUserSaleNFTs","result","send","script","args","arg","address","Address","then","decode","console","log","purchase","id","transactionId","transaction","parseInt","UInt64","payer","authz","proposer","authorizations","limit","tx","onceSealed","backgroundColor","Object","keys","map","nftID","price","width","nftRef","ipfsHash","metadata","name"],"mappings":"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","sourcesContent":["import './App.css';\n\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport {useState, useEffect} from 'react';\nimport {getSaleNFTsScript} from \"./cadence/scripts/get_sale_nfts\";\nimport {purchaseTx} from \"./cadence/transactions/purchase.js\";\n\nfunction SaleCollection(props) {\n  const [nfts, setNFTs] = useState([]);\n\n  useEffect(() => {\n    getUserSaleNFTs();\n  }, [])\n\n  const getUserSaleNFTs = async () => {\n      const result = await fcl.send([\n          fcl.script(getSaleNFTsScript),\n          fcl.args([\n              fcl.arg(props.address, t.Address)\n          ])\n      ]).then(fcl.decode);\n\n      console.log(result);\n      setNFTs(result);\n  }\n\n  const purchase = async (id) => {\n    const transactionId = await fcl.send([\n        fcl.transaction(purchaseTx),\n        fcl.args([\n          fcl.arg(props.address, t.Address),\n          fcl.arg(parseInt(id), t.UInt64)\n        ]),\n        fcl.payer(fcl.authz),\n        fcl.proposer(fcl.authz),\n        fcl.authorizations([fcl.authz]),\n        fcl.limit(9999)\n      ]).then(fcl.decode);\n  \n      console.log(transactionId);\n      return fcl.tx(transactionId).onceSealed();\n  }\n \n  return (\n    <div style={{backgroundColor: 'lightblue'}}>\n      {Object.keys(nfts).map(nftID => (\n          <div key={nftID}>\n              <h1>Price: {nfts[nftID].price}</h1>\n              <h1>{nftID}</h1>\n              <img style={{width: \"100px\"}} src={`https://ipfs.infura.io/ipfs/${nfts[nftID].nftRef.ipfsHash}`} />\n              <h1>{nfts[nftID].nftRef.metadata.name}</h1>\n              <button onClick={() => purchase(nftID)}>Purchase this NFT</button>\n          </div>\n      ))}\n    </div>\n  );\n}\n\nexport default SaleCollection;"]},"metadata":{},"sourceType":"module"}