{"ast":null,"code":"export const getSaleNFTsScript = `\nimport MyNFT from 0x40582f87fa3d66cb\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport NFTMarketplace from 0x40582f87fa3d66cb\n\npub fun main(account: Address): {UInt64: NFTMarketplace.SaleItem} {\n  let saleCollection = getAccount(account).getCapability(/public/MySaleCollection)\n                        .borrow<&NFTMarketplace.SaleCollection{NFTMarketplace.SaleCollectionPublic}>()\n                        ?? panic(\"Could not borrow the user's SaleCollection\")\n\n  let collection = getAccount(account).getCapability(/public/MyNFTCollection) \n                    .borrow<&MyNFT.Collection{NonFungibleToken.CollectionPublic, MyNFT.CollectionPublic}>()\n                    ?? panic(\"Can't get the User's collection.\")\n\n  let saleIDs = saleCollection.getIDs()\n\n  let returnVals: {UInt64: NFTMarketplace.SaleItem} = {}\n\n  for saleID in saleIDs {\n    let price = saleCollection.getPrice(id: saleID)\n    let nftRef = collection.borrowEntireNFT(id: saleID)\n\n    returnVals.insert(key: nftRef.id, NFTMarketplace.SaleItem(_price: price, _nftRef: nftRef))\n  }\n\n  return returnVals\n}\n`;","map":{"version":3,"sources":["/home/prakash/nftdapp-tutorial/src/cadence/scripts/get_sale_nfts.js"],"names":["getSaleNFTsScript"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3BO","sourcesContent":["export const getSaleNFTsScript = `\nimport MyNFT from 0x40582f87fa3d66cb\nimport NonFungibleToken from 0x631e88ae7f1d7c20\nimport NFTMarketplace from 0x40582f87fa3d66cb\n\npub fun main(account: Address): {UInt64: NFTMarketplace.SaleItem} {\n  let saleCollection = getAccount(account).getCapability(/public/MySaleCollection)\n                        .borrow<&NFTMarketplace.SaleCollection{NFTMarketplace.SaleCollectionPublic}>()\n                        ?? panic(\"Could not borrow the user's SaleCollection\")\n\n  let collection = getAccount(account).getCapability(/public/MyNFTCollection) \n                    .borrow<&MyNFT.Collection{NonFungibleToken.CollectionPublic, MyNFT.CollectionPublic}>()\n                    ?? panic(\"Can't get the User's collection.\")\n\n  let saleIDs = saleCollection.getIDs()\n\n  let returnVals: {UInt64: NFTMarketplace.SaleItem} = {}\n\n  for saleID in saleIDs {\n    let price = saleCollection.getPrice(id: saleID)\n    let nftRef = collection.borrowEntireNFT(id: saleID)\n\n    returnVals.insert(key: nftRef.id, NFTMarketplace.SaleItem(_price: price, _nftRef: nftRef))\n  }\n\n  return returnVals\n}\n`"]},"metadata":{},"sourceType":"module"}